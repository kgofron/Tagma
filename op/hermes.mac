long array si_dat[3][640]
long array si_val[3]
global si_dat
global si_val

# Flags to turn on and off use of Hermes detector. 
# HERMES is a global flag. Nothing happens if it is zero.
# ENABLEA, ENABLEB, ENABLEC turn on or off the saving of one of the three
# counters on each channel. A is the threshold, B and C are the SCA counters.
# THe simplest possible configuration has HERMES=1 and ENABLEA=1. THe default
# has all =1.

# Spec Counters THR, SCA1 and SCA2 are the integral of all the counts A B and C above.
# For alignment purposes, counter CEN is defined as the sum of the central 8 channels. 
#  Thus, scanning some feature using that as the signal will allow it to be centered.

global HERMES
global ENABLEA
global ENABLEB
global ENABLEC

HERMES=1
ENABLEA=1
ENABLEB=0
ENABLEC=0
DETNAME="det1"

def hermes_getcounts '
# Read all three chips counters into si_dat array.
# Put integrated counts into Spec counter variables.
# Put central 8 channels of si_dat[0] into Spec variable.
   if(HERMES==1){
	global si_dat
	global si_val
	si_dat[0][:]=epics_get(DETNAME ".S1")
	si_dat[1][:]=epics_get(DETNAME ".S2")
	si_dat[2][:]=epics_get(DETNAME ".S3")
	si_val=epics_get(DETNAME ".VAL")
	S[THR]=si_val[0]
	S[SCA1]=si_val[1]
	S[SCA2]=si_val[2]
	}
'
def hermes_precount '
# start detector acquisition
  if(HERMES==1){
	epics_put(DETNAME ".TP",COUNT_TIME)
	epics_put(DETNAME ".CNT",1)
	}
'
def hermes_postcount '
# wait for acquisition to complete.
#	print "Done. ",
   if(HERMES==1){
	while(epics_get(DETNAME ".CNT")=="Count"){}
	}
'
	
def hermes_scan_loop '

  if(HERMES==1){
	local i
	on(DATAFILE);offt
	if(ENABLEA==1){
	  printf("\n@A ")
	  for(i=0;i<=639;i++){
		  printf("%i ",si_dat[0][i])
		  }
		}
	if(ENABLEB==1){	
	  printf("\n@B ")
	  for(i=0;i<=639;i++){
		printf("%i ",si_dat[1][i])
		}
	}
	if(ENABLEC==1){
	  printf("\n@C ")
	  for(i=0;i<=639;i++){
		printf("%i ",si_dat[2][i])
		}
	 }
	  printf("\n")
	  ont; off(DATAFILE)
	}
'

def cleanup '
    epics_put(DETNAME ".CNT",0)
    '

	
cdef("user_precount","hermes_precount;","hermes_precount")
cdef("user_getcounts","hermes_getcounts;","hermes_getcounts")
cdef("user_postcount","hermes_postcount;","hermes_postcount")
cdef("user_scan_loop","hermes_scan_loop;","hermes_scan_loop")
cdef("cleanup","cleanup;","cleanup")

